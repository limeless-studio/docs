"use strict";(self.webpackChunkcore_docs=self.webpackChunkcore_docs||[]).push([[9989],{3876:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>c,toc:()=>u});var s=r(5893),o=r(1151);const n={},i="Special Attributes",c={id:"root/CoreDocs/Attributes/SpecialAttributes",title:"Special Attributes",description:"AllowNesting",source:"@site/docs/root/CoreDocs/Attributes/SpecialAttributes.md",sourceDirName:"root/CoreDocs/Attributes",slug:"/root/CoreDocs/Attributes/SpecialAttributes",permalink:"/docs/docs/root/CoreDocs/Attributes/SpecialAttributes",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/root/CoreDocs/Attributes/SpecialAttributes.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Meta Attributes",permalink:"/docs/docs/root/CoreDocs/Attributes/MetaAttributes"},next:{title:"Validator Attributes",permalink:"/docs/docs/root/CoreDocs/Attributes/ValidatorAttributes"}},a={},u=[{value:"AllowNesting",id:"allownesting",level:2}];function l(t){const e={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...t.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"special-attributes",children:"Special Attributes"}),"\n",(0,s.jsx)(e.h2,{id:"allownesting",children:"AllowNesting"}),"\n",(0,s.jsxs)(e.p,{children:["By default ",(0,s.jsx)(e.a,{href:"/docs/docs/root/CoreDocs/Attributes/DrawerAttributes",children:"Drawer Attributes"})," can be nested inside structs and classes.\r\n",(0,s.jsx)(e.a,{href:"/docs/docs/root/CoreDocs/Attributes/MetaAttributes",children:"Meta Attributes"})," and ",(0,s.jsx)(e.a,{href:"/docs/docs/root/CoreDocs/Attributes/ValidatorAttributes",children:"Validator Attributes"})," however are not drawers and don\u2019t support nesting out of the box.\r\nIf you want to use EnableIf / DisableIf attributes inside structs for instance, you have to use the ",(0,s.jsx)(e.code,{children:"AllowNesting"})," attribute like so:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'public class SampleComponent : MonoBehaviour\r\n{\r\n    public MyStruct myStruct;\r\n}\r\n\r\n[System.Serializable]\r\npublic struct MyStruct\r\n{\r\n    public bool enableFlag;\r\n\r\n    [EnableIf("enableFlag")]\r\n    [AllowNesting] // Because it\'s nested we need to explicitly allow nesting\r\n    public int integer;\r\n}\n'})})]})}function d(t={}){const{wrapper:e}={...(0,o.a)(),...t.components};return e?(0,s.jsx)(e,{...t,children:(0,s.jsx)(l,{...t})}):l(t)}},1151:(t,e,r)=>{r.d(e,{Z:()=>c,a:()=>i});var s=r(7294);const o={},n=s.createContext(o);function i(t){const e=s.useContext(n);return s.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:i(t.components),s.createElement(n.Provider,{value:e},t.children)}}}]);